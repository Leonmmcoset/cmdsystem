# encoding: utf-8
# module panda3d.core
# from C:\Users\leonm\PycharmProjects\leonsystem\venv\Lib\site-packages\panda3d\core.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import dtoolconfig as __dtoolconfig
import enum as __enum


class Light(__dtoolconfig.DTOOL_SUPER_BASE):
    """
    /**
     * The abstract interface to all kinds of lights.  The actual light objects
     * also inherit from PandaNode, and can therefore be added to the scene graph
     * at some arbitrary point to define the coordinate system of effect.
     */
    """
    def asNode(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        as_node(const Light self)
        """
        pass

    def as_node(self, const_Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        as_node(const Light self)
        """
        pass

    def getAttenuation(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_attenuation(Light self)
        
        /**
         * Returns the terms of the attenuation equation for the light.  These are, in
         * order, the constant, linear, and quadratic terms based on the distance from
         * the point to the vertex.
         */
        """
        pass

    def getClassPriority(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_class_priority(Light self)
        """
        pass

    def getClassType(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_class_type()
        """
        pass

    def getColor(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_color(Light self)
        
        /**
         * Returns the basic color of the light.
         */
        """
        pass

    def getColorTemperature(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_color_temperature(Light self)
        
        /**
         * Returns the basic color temperature of the light, assuming
         * has_color_temperature() returns true.
         *
         * @since 1.10.0
         */
        """
        pass

    def getExponent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_exponent(Light self)
        
        /**
         * For spotlights, returns the exponent that controls the amount of light
         * falloff from the center of the spotlight.  For other kinds of lights,
         * returns 0.
         */
        """
        pass

    def getPriority(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_priority(Light self)
        
        /**
         * Returns the priority associated with this light.  See set_priority().
         */
        """
        pass

    def getSpecularColor(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_specular_color(Light self)
        
        /**
         * Returns the color of specular highlights generated by the light.  This
         * value is meaningless for ambient lights.
         */
        """
        pass

    def get_attenuation(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_attenuation(Light self)
        
        /**
         * Returns the terms of the attenuation equation for the light.  These are, in
         * order, the constant, linear, and quadratic terms based on the distance from
         * the point to the vertex.
         */
        """
        pass

    def get_class_priority(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_class_priority(Light self)
        """
        pass

    def get_class_type(self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_class_type()
        """
        pass

    def get_color(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_color(Light self)
        
        /**
         * Returns the basic color of the light.
         */
        """
        pass

    def get_color_temperature(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_color_temperature(Light self)
        
        /**
         * Returns the basic color temperature of the light, assuming
         * has_color_temperature() returns true.
         *
         * @since 1.10.0
         */
        """
        pass

    def get_exponent(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_exponent(Light self)
        
        /**
         * For spotlights, returns the exponent that controls the amount of light
         * falloff from the center of the spotlight.  For other kinds of lights,
         * returns 0.
         */
        """
        pass

    def get_priority(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_priority(Light self)
        
        /**
         * Returns the priority associated with this light.  See set_priority().
         */
        """
        pass

    def get_specular_color(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_specular_color(Light self)
        
        /**
         * Returns the color of specular highlights generated by the light.  This
         * value is meaningless for ambient lights.
         */
        """
        pass

    def hasColorTemperature(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        has_color_temperature(Light self)
        
        /**
         * Returns true if the color was specified as a temperature in kelvins, and
         * get_color_temperature is defined.
         *
         * @since 1.10.0
         */
        """
        pass

    def has_color_temperature(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        has_color_temperature(Light self)
        
        /**
         * Returns true if the color was specified as a temperature in kelvins, and
         * get_color_temperature is defined.
         *
         * @since 1.10.0
         */
        """
        pass

    def isAmbientLight(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        is_ambient_light(Light self)
        
        /**
         * Returns true if this is an AmbientLight, false if it is some other kind of
         * light.
         */
        """
        pass

    def is_ambient_light(self, Light_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        is_ambient_light(Light self)
        
        /**
         * Returns true if this is an AmbientLight, false if it is some other kind of
         * light.
         */
        """
        pass

    def setColor(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_color(const Light self, const LVecBase4f color)
        
        /**
         * Sets the basic color of the light.
         */
        """
        pass

    def setColorTemperature(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_color_temperature(const Light self, float temperature)
        
        /**
         * Sets the color temperature of the light in kelvins.  This will recalculate
         * the light's color.
         *
         * The default value is 6500 K, corresponding to a perfectly white light
         * assuming a D65 white point.
         *
         * @since 1.10.0
         */
        """
        pass

    def setPriority(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_priority(const Light self, int priority)
        
        /**
         * Changes the relative importance of this light relative to the other lights
         * that are applied simultaneously.
         *
         * The priority number is used to decide which of the requested lights are to
         * be selected for rendering when more lights are requested than the hardware
         * will support.  The highest-priority n lights are selected for rendering.
         *
         * This is similar to TextureStage::set_priority().
         */
        """
        pass

    def set_color(self, const_Light_self, const_LVecBase4f_color): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_color(const Light self, const LVecBase4f color)
        
        /**
         * Sets the basic color of the light.
         */
        """
        pass

    def set_color_temperature(self, const_Light_self, float_temperature): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_color_temperature(const Light self, float temperature)
        
        /**
         * Sets the color temperature of the light in kelvins.  This will recalculate
         * the light's color.
         *
         * The default value is 6500 K, corresponding to a perfectly white light
         * assuming a D65 white point.
         *
         * @since 1.10.0
         */
        """
        pass

    def set_priority(self, const_Light_self, int_priority): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_priority(const Light self, int priority)
        
        /**
         * Changes the relative importance of this light relative to the other lights
         * that are applied simultaneously.
         *
         * The priority number is used to decide which of the requested lights are to
         * be selected for rendering when more lights are requested than the hardware
         * will support.  The highest-priority n lights are selected for rendering.
         *
         * This is similar to TextureStage::set_priority().
         */
        """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    color_temperature = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    priority = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    DtoolClassDict = {
        'DtoolClassDict': '<value is a self-reference, replaced by this string>',
        '__doc__': '/**\n * The abstract interface to all kinds of lights.  The actual light objects\n * also inherit from PandaNode, and can therefore be added to the scene graph\n * at some arbitrary point to define the coordinate system of effect.\n */',
        '__init__': None, # (!) real value is "<slot wrapper '__init__' of 'panda3d.core.Light' objects>"
        '__new__': None, # (!) real value is '<built-in method __new__ of type object at 0x00007FFCFE297BB0>'
        'asNode': None, # (!) real value is "<method 'asNode' of 'panda3d.core.Light' objects>"
        'as_node': None, # (!) real value is "<method 'as_node' of 'panda3d.core.Light' objects>"
        'color': None, # (!) real value is "<attribute 'color' of 'panda3d.core.Light' objects>"
        'color_temperature': None, # (!) real value is "<attribute 'color_temperature' of 'panda3d.core.Light' objects>"
        'getAttenuation': None, # (!) real value is "<method 'getAttenuation' of 'panda3d.core.Light' objects>"
        'getClassPriority': None, # (!) real value is "<method 'getClassPriority' of 'panda3d.core.Light' objects>"
        'getClassType': None, # (!) real value is '<staticmethod(<built-in method getClassType of type object at 0x00007FFCFE297BB0>)>'
        'getColor': None, # (!) real value is "<method 'getColor' of 'panda3d.core.Light' objects>"
        'getColorTemperature': None, # (!) real value is "<method 'getColorTemperature' of 'panda3d.core.Light' objects>"
        'getExponent': None, # (!) real value is "<method 'getExponent' of 'panda3d.core.Light' objects>"
        'getPriority': None, # (!) real value is "<method 'getPriority' of 'panda3d.core.Light' objects>"
        'getSpecularColor': None, # (!) real value is "<method 'getSpecularColor' of 'panda3d.core.Light' objects>"
        'get_attenuation': None, # (!) real value is "<method 'get_attenuation' of 'panda3d.core.Light' objects>"
        'get_class_priority': None, # (!) real value is "<method 'get_class_priority' of 'panda3d.core.Light' objects>"
        'get_class_type': None, # (!) real value is '<staticmethod(<built-in method get_class_type of type object at 0x00007FFCFE297BB0>)>'
        'get_color': None, # (!) real value is "<method 'get_color' of 'panda3d.core.Light' objects>"
        'get_color_temperature': None, # (!) real value is "<method 'get_color_temperature' of 'panda3d.core.Light' objects>"
        'get_exponent': None, # (!) real value is "<method 'get_exponent' of 'panda3d.core.Light' objects>"
        'get_priority': None, # (!) real value is "<method 'get_priority' of 'panda3d.core.Light' objects>"
        'get_specular_color': None, # (!) real value is "<method 'get_specular_color' of 'panda3d.core.Light' objects>"
        'hasColorTemperature': None, # (!) real value is "<method 'hasColorTemperature' of 'panda3d.core.Light' objects>"
        'has_color_temperature': None, # (!) real value is "<method 'has_color_temperature' of 'panda3d.core.Light' objects>"
        'isAmbientLight': None, # (!) real value is "<method 'isAmbientLight' of 'panda3d.core.Light' objects>"
        'is_ambient_light': None, # (!) real value is "<method 'is_ambient_light' of 'panda3d.core.Light' objects>"
        'priority': None, # (!) real value is "<attribute 'priority' of 'panda3d.core.Light' objects>"
        'setColor': None, # (!) real value is "<method 'setColor' of 'panda3d.core.Light' objects>"
        'setColorTemperature': None, # (!) real value is "<method 'setColorTemperature' of 'panda3d.core.Light' objects>"
        'setPriority': None, # (!) real value is "<method 'setPriority' of 'panda3d.core.Light' objects>"
        'set_color': None, # (!) real value is "<method 'set_color' of 'panda3d.core.Light' objects>"
        'set_color_temperature': None, # (!) real value is "<method 'set_color_temperature' of 'panda3d.core.Light' objects>"
        'set_priority': None, # (!) real value is "<method 'set_priority' of 'panda3d.core.Light' objects>"
    }


