# encoding: utf-8
# module panda3d.core
# from C:\Users\leonm\PycharmProjects\leonsystem\venv\Lib\site-packages\panda3d\core.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import dtoolconfig as __dtoolconfig
import enum as __enum


from .Namable import Namable

class LineSegs(Namable):
    """
    /**
     * Encapsulates creation of a series of connected or disconnected line
     * segments or points, for drawing paths or rays.  This class doesn't attempt
     * to be the smartest it could possibly be; it's intended primarily as a
     * visualization and editing tool.
     */
    """
    def create(self, const_LineSegs_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        create(const LineSegs self)
        create(const LineSegs self, GeomNode previous, bool dynamic)
        create(const LineSegs self, bool dynamic)
        
        /**
         * Creates a new GeomNode that will render the series of line segments and
         * points described via calls to move_to() and draw_to().  The lines and
         * points are created with the color and thickness established by calls to
         * set_color() and set_thickness().
         *
         * If dynamic is true, the line segments will be created with the dynamic Geom
         * setting, optimizing them for runtime vertex animation.
         */
        
        /**
         * Appends to an existing GeomNode a new Geom that will render the series of
         * line segments and points described via calls to move_to() and draw_to().
         * The lines and points are created with the color and thickness established
         * by calls to set_color() and set_thickness().
         *
         * If dynamic is true, the line segments will be created with the dynamic Geom
         * setting, optimizing them for runtime vertex animation.
         */
        """
        pass

    def drawTo(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        draw_to(const LineSegs self, const LVecBase3f v)
        draw_to(const LineSegs self, float x, float y, float z)
        
        /**
         * Draws a line segment from the pen's last position (the last call to move_to
         * or draw_to) to the indicated point.  move_to() and draw_to() only update
         * tables; the actual drawing is performed when create() is called.
         */
        
        /**
         * Draws a line segment from the pen's last position (the last call to move_to
         * or draw_to) to the indicated point.  move_to() and draw_to() only update
         * tables; the actual drawing is performed when create() is called.
         */
        """
        pass

    def draw_to(self, const_LineSegs_self, const_LVecBase3f_v): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        draw_to(const LineSegs self, const LVecBase3f v)
        draw_to(const LineSegs self, float x, float y, float z)
        
        /**
         * Draws a line segment from the pen's last position (the last call to move_to
         * or draw_to) to the indicated point.  move_to() and draw_to() only update
         * tables; the actual drawing is performed when create() is called.
         */
        
        /**
         * Draws a line segment from the pen's last position (the last call to move_to
         * or draw_to) to the indicated point.  move_to() and draw_to() only update
         * tables; the actual drawing is performed when create() is called.
         */
        """
        pass

    def getCurrentPosition(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_current_position(const LineSegs self)
        
        /**
         * Returns the pen's current position.  The next call to draw_to() will draw a
         * line segment from this point.
         */
        """
        pass

    def getNumVertices(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_num_vertices(LineSegs self)
        
        // Functions to move the line vertices after they have been created.
        
        // Functions to move the line vertices after they have been created.
        
        // Functions to move the line vertices after they have been created.
        
        /**
         * Returns the total number of line segment and point vertices generated by
         * the last call to create().  The positions of these vertices may be read and
         * adjusted through get_vertex() and set_vertex().
         */
        """
        pass

    def getVertex(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_vertex(LineSegs self, int n)
        
        /**
         * Returns the nth point or vertex of the line segment sequence generated by
         * the last call to create().  The first move_to() generates vertex 0;
         * subsequent move_to() and draw_to() calls generate consecutively higher
         * vertex numbers.
         */
        """
        pass

    def getVertexColor(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_vertex_color(LineSegs self, int vertex)
        
        /**
         * Returns the color of the nth point or vertex.
         */
        """
        pass

    def getVertexColors(self, *args, **kwargs): # real signature unknown
        pass

    def getVertices(self, *args, **kwargs): # real signature unknown
        pass

    def get_current_position(self, const_LineSegs_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_current_position(const LineSegs self)
        
        /**
         * Returns the pen's current position.  The next call to draw_to() will draw a
         * line segment from this point.
         */
        """
        pass

    def get_num_vertices(self, LineSegs_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_num_vertices(LineSegs self)
        
        // Functions to move the line vertices after they have been created.
        
        // Functions to move the line vertices after they have been created.
        
        // Functions to move the line vertices after they have been created.
        
        /**
         * Returns the total number of line segment and point vertices generated by
         * the last call to create().  The positions of these vertices may be read and
         * adjusted through get_vertex() and set_vertex().
         */
        """
        pass

    def get_vertex(self, LineSegs_self, int_n): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_vertex(LineSegs self, int n)
        
        /**
         * Returns the nth point or vertex of the line segment sequence generated by
         * the last call to create().  The first move_to() generates vertex 0;
         * subsequent move_to() and draw_to() calls generate consecutively higher
         * vertex numbers.
         */
        """
        pass

    def get_vertex_color(self, LineSegs_self, int_vertex): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_vertex_color(LineSegs self, int vertex)
        
        /**
         * Returns the color of the nth point or vertex.
         */
        """
        pass

    def get_vertex_colors(self, *args, **kwargs): # real signature unknown
        pass

    def get_vertices(self, *args, **kwargs): # real signature unknown
        pass

    def isEmpty(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        is_empty(const LineSegs self)
        
        /**
         * Returns true if move_to() or draw_to() have not been called since the last
         * reset() or create(), false otherwise.
         */
        """
        pass

    def is_empty(self, const_LineSegs_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        is_empty(const LineSegs self)
        
        /**
         * Returns true if move_to() or draw_to() have not been called since the last
         * reset() or create(), false otherwise.
         */
        """
        pass

    def moveTo(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        move_to(const LineSegs self, const LVecBase3f v)
        move_to(const LineSegs self, float x, float y, float z)
        
        /**
         * Moves the pen to the given point without drawing a line.  When followed by
         * draw_to(), this marks the first point of a line segment; when followed by
         * move_to() or create(), this creates a single point.
         */
        
        /**
         * Moves the pen to the given point without drawing a line.  When followed by
         * draw_to(), this marks the first point of a line segment; when followed by
         * move_to() or create(), this creates a single point.
         */
        """
        pass

    def move_to(self, const_LineSegs_self, const_LVecBase3f_v): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        move_to(const LineSegs self, const LVecBase3f v)
        move_to(const LineSegs self, float x, float y, float z)
        
        /**
         * Moves the pen to the given point without drawing a line.  When followed by
         * draw_to(), this marks the first point of a line segment; when followed by
         * move_to() or create(), this creates a single point.
         */
        
        /**
         * Moves the pen to the given point without drawing a line.  When followed by
         * draw_to(), this marks the first point of a line segment; when followed by
         * move_to() or create(), this creates a single point.
         */
        """
        pass

    def reset(self, const_LineSegs_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        reset(const LineSegs self)
        
        /**
         * Removes any lines in progress and resets to the initial empty state.
         */
        """
        pass

    def setColor(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_color(const LineSegs self, const LVecBase4f color)
        set_color(const LineSegs self, float r, float g, float b, float a)
        
        /**
         * Establishes the color that will be assigned to all vertices created by
         * future calls to move_to() and draw_to().
         */
        
        /**
         * Establishes the color that will be assigned to all vertices created by
         * future calls to move_to() and draw_to().
         */
        """
        pass

    def setThickness(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_thickness(const LineSegs self, float thick)
        
        /**
         * Establishes the line thickness or point size in pixels that will be
         * assigned to all lines and points created by future calls to create().
         */
        """
        pass

    def setVertex(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_vertex(const LineSegs self, int n, const LPoint3f vert)
        set_vertex(const LineSegs self, int vertex, float x, float y, float z)
        
        /**
         * Moves the nth point or vertex of the line segment sequence generated by the
         * last call to create().  The first move_to() generates vertex 0; subsequent
         * move_to() and draw_to() calls generate consecutively higher vertex numbers.
         */
        
        /**
         * Moves the nth point or vertex of the line segment sequence generated by the
         * last call to create().  The first move_to() generates vertex 0; subsequent
         * move_to() and draw_to() calls generate consecutively higher vertex numbers.
         */
        """
        pass

    def setVertexColor(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_vertex_color(const LineSegs self, int vertex, const LVecBase4f c)
        set_vertex_color(const LineSegs self, int vertex, float r, float g, float b, float a)
        
        /**
         * Changes the vertex color of the nth point or vertex.  See set_vertex().
         */
        
        /**
         * Changes the vertex color of the nth point or vertex.  See set_vertex().
         */
        """
        pass

    def set_color(self, const_LineSegs_self, const_LVecBase4f_color): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_color(const LineSegs self, const LVecBase4f color)
        set_color(const LineSegs self, float r, float g, float b, float a)
        
        /**
         * Establishes the color that will be assigned to all vertices created by
         * future calls to move_to() and draw_to().
         */
        
        /**
         * Establishes the color that will be assigned to all vertices created by
         * future calls to move_to() and draw_to().
         */
        """
        pass

    def set_thickness(self, const_LineSegs_self, float_thick): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_thickness(const LineSegs self, float thick)
        
        /**
         * Establishes the line thickness or point size in pixels that will be
         * assigned to all lines and points created by future calls to create().
         */
        """
        pass

    def set_vertex(self, const_LineSegs_self, int_n, const_LPoint3f_vert): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_vertex(const LineSegs self, int n, const LPoint3f vert)
        set_vertex(const LineSegs self, int vertex, float x, float y, float z)
        
        /**
         * Moves the nth point or vertex of the line segment sequence generated by the
         * last call to create().  The first move_to() generates vertex 0; subsequent
         * move_to() and draw_to() calls generate consecutively higher vertex numbers.
         */
        
        /**
         * Moves the nth point or vertex of the line segment sequence generated by the
         * last call to create().  The first move_to() generates vertex 0; subsequent
         * move_to() and draw_to() calls generate consecutively higher vertex numbers.
         */
        """
        pass

    def set_vertex_color(self, const_LineSegs_self, int_vertex, const_LVecBase4f_c): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_vertex_color(const LineSegs self, int vertex, const LVecBase4f c)
        set_vertex_color(const LineSegs self, int vertex, float r, float g, float b, float a)
        
        /**
         * Changes the vertex color of the nth point or vertex.  See set_vertex().
         */
        
        /**
         * Changes the vertex color of the nth point or vertex.  See set_vertex().
         */
        """
        pass

    def __copy__(self, *args, **kwargs): # real signature unknown
        pass

    def __deepcopy__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    DtoolClassDict = {
        'DtoolClassDict': '<value is a self-reference, replaced by this string>',
        '__copy__': None, # (!) real value is "<method '__copy__' of 'panda3d.core.LineSegs' objects>"
        '__deepcopy__': None, # (!) real value is "<method '__deepcopy__' of 'panda3d.core.LineSegs' objects>"
        '__doc__': "/**\n * Encapsulates creation of a series of connected or disconnected line\n * segments or points, for drawing paths or rays.  This class doesn't attempt\n * to be the smartest it could possibly be; it's intended primarily as a\n * visualization and editing tool.\n */",
        '__init__': None, # (!) real value is "<slot wrapper '__init__' of 'panda3d.core.LineSegs' objects>"
        '__new__': None, # (!) real value is '<built-in method __new__ of type object at 0x00007FFCFE2BC900>'
        'create': None, # (!) real value is "<method 'create' of 'panda3d.core.LineSegs' objects>"
        'drawTo': None, # (!) real value is "<method 'drawTo' of 'panda3d.core.LineSegs' objects>"
        'draw_to': None, # (!) real value is "<method 'draw_to' of 'panda3d.core.LineSegs' objects>"
        'getCurrentPosition': None, # (!) real value is "<method 'getCurrentPosition' of 'panda3d.core.LineSegs' objects>"
        'getNumVertices': None, # (!) real value is "<method 'getNumVertices' of 'panda3d.core.LineSegs' objects>"
        'getVertex': None, # (!) real value is "<method 'getVertex' of 'panda3d.core.LineSegs' objects>"
        'getVertexColor': None, # (!) real value is "<method 'getVertexColor' of 'panda3d.core.LineSegs' objects>"
        'getVertexColors': None, # (!) real value is "<method 'getVertexColors' of 'panda3d.core.LineSegs' objects>"
        'getVertices': None, # (!) real value is "<method 'getVertices' of 'panda3d.core.LineSegs' objects>"
        'get_current_position': None, # (!) real value is "<method 'get_current_position' of 'panda3d.core.LineSegs' objects>"
        'get_num_vertices': None, # (!) real value is "<method 'get_num_vertices' of 'panda3d.core.LineSegs' objects>"
        'get_vertex': None, # (!) real value is "<method 'get_vertex' of 'panda3d.core.LineSegs' objects>"
        'get_vertex_color': None, # (!) real value is "<method 'get_vertex_color' of 'panda3d.core.LineSegs' objects>"
        'get_vertex_colors': None, # (!) real value is "<method 'get_vertex_colors' of 'panda3d.core.LineSegs' objects>"
        'get_vertices': None, # (!) real value is "<method 'get_vertices' of 'panda3d.core.LineSegs' objects>"
        'isEmpty': None, # (!) real value is "<method 'isEmpty' of 'panda3d.core.LineSegs' objects>"
        'is_empty': None, # (!) real value is "<method 'is_empty' of 'panda3d.core.LineSegs' objects>"
        'moveTo': None, # (!) real value is "<method 'moveTo' of 'panda3d.core.LineSegs' objects>"
        'move_to': None, # (!) real value is "<method 'move_to' of 'panda3d.core.LineSegs' objects>"
        'reset': None, # (!) real value is "<method 'reset' of 'panda3d.core.LineSegs' objects>"
        'setColor': None, # (!) real value is "<method 'setColor' of 'panda3d.core.LineSegs' objects>"
        'setThickness': None, # (!) real value is "<method 'setThickness' of 'panda3d.core.LineSegs' objects>"
        'setVertex': None, # (!) real value is "<method 'setVertex' of 'panda3d.core.LineSegs' objects>"
        'setVertexColor': None, # (!) real value is "<method 'setVertexColor' of 'panda3d.core.LineSegs' objects>"
        'set_color': None, # (!) real value is "<method 'set_color' of 'panda3d.core.LineSegs' objects>"
        'set_thickness': None, # (!) real value is "<method 'set_thickness' of 'panda3d.core.LineSegs' objects>"
        'set_vertex': None, # (!) real value is "<method 'set_vertex' of 'panda3d.core.LineSegs' objects>"
        'set_vertex_color': None, # (!) real value is "<method 'set_vertex_color' of 'panda3d.core.LineSegs' objects>"
    }


