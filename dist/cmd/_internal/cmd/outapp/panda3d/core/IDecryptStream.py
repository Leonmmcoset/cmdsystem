# encoding: utf-8
# module panda3d.core
# from C:\Users\leonm\PycharmProjects\leonsystem\venv\Lib\site-packages\panda3d\core.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import dtoolconfig as __dtoolconfig
import enum as __enum


from .istream import istream

class IDecryptStream(istream):
    """
    /**
     * An input stream object that uses OpenSSL to decrypt the input from another
     * source stream on-the-fly.
     *
     * Attach an IDecryptStream to an existing istream that provides encrypted
     * data, as generated by an OEncryptStream, and read the corresponding
     * unencrypted data from the IDecryptStream.
     *
     * Seeking is not supported.
     */
    """
    def close(self, const_IDecryptStream_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        close(const IDecryptStream self)
        
        /**
         * Resets the EncryptStream to empty, but does not actually close the source
         * istream unless owns_source was true.
         */
        """
        pass

    def getAlgorithm(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_algorithm(IDecryptStream self)
        
        /**
         * Returns the encryption algorithm that was read from the stream.
         */
        """
        pass

    def getIterationCount(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_iteration_count(IDecryptStream self)
        
        /**
         * Returns the value that was was read from the stream.
         */
        """
        pass

    def getKeyLength(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_key_length(IDecryptStream self)
        
        /**
         * Returns the encryption key length, in bits, that was read from the stream.
         */
        """
        pass

    def get_algorithm(self, IDecryptStream_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_algorithm(IDecryptStream self)
        
        /**
         * Returns the encryption algorithm that was read from the stream.
         */
        """
        pass

    def get_iteration_count(self, IDecryptStream_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_iteration_count(IDecryptStream self)
        
        /**
         * Returns the value that was was read from the stream.
         */
        """
        pass

    def get_key_length(self, IDecryptStream_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_key_length(IDecryptStream self)
        
        /**
         * Returns the encryption key length, in bits, that was read from the stream.
         */
        """
        pass

    def open(self, const_IDecryptStream_self, istream_source, bool_owns_source, str_password): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        open(const IDecryptStream self, istream source, bool owns_source, str password)
        
        /**
         *
         */
        """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    algorithm = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    iteration_count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    key_length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    DtoolClassDict = {
        'DtoolClassDict': '<value is a self-reference, replaced by this string>',
        '__doc__': '/**\n * An input stream object that uses OpenSSL to decrypt the input from another\n * source stream on-the-fly.\n *\n * Attach an IDecryptStream to an existing istream that provides encrypted\n * data, as generated by an OEncryptStream, and read the corresponding\n * unencrypted data from the IDecryptStream.\n *\n * Seeking is not supported.\n */',
        '__init__': None, # (!) real value is "<slot wrapper '__init__' of 'panda3d.core.IDecryptStream' objects>"
        '__new__': None, # (!) real value is '<built-in method __new__ of type object at 0x00007FFCFE264150>'
        'algorithm': None, # (!) real value is "<attribute 'algorithm' of 'panda3d.core.IDecryptStream' objects>"
        'close': None, # (!) real value is "<method 'close' of 'panda3d.core.IDecryptStream' objects>"
        'getAlgorithm': None, # (!) real value is "<method 'getAlgorithm' of 'panda3d.core.IDecryptStream' objects>"
        'getIterationCount': None, # (!) real value is "<method 'getIterationCount' of 'panda3d.core.IDecryptStream' objects>"
        'getKeyLength': None, # (!) real value is "<method 'getKeyLength' of 'panda3d.core.IDecryptStream' objects>"
        'get_algorithm': None, # (!) real value is "<method 'get_algorithm' of 'panda3d.core.IDecryptStream' objects>"
        'get_iteration_count': None, # (!) real value is "<method 'get_iteration_count' of 'panda3d.core.IDecryptStream' objects>"
        'get_key_length': None, # (!) real value is "<method 'get_key_length' of 'panda3d.core.IDecryptStream' objects>"
        'iteration_count': None, # (!) real value is "<attribute 'iteration_count' of 'panda3d.core.IDecryptStream' objects>"
        'key_length': None, # (!) real value is "<attribute 'key_length' of 'panda3d.core.IDecryptStream' objects>"
        'open': None, # (!) real value is "<method 'open' of 'panda3d.core.IDecryptStream' objects>"
    }


