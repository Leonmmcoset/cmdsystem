# encoding: utf-8
# module panda3d.core
# from C:\Users\leonm\PycharmProjects\leonsystem\venv\Lib\site-packages\panda3d\core.cp311-win_amd64.pyd
# by generator 1.147
# no doc

# imports
import dtoolconfig as __dtoolconfig
import enum as __enum


from .DataNode import DataNode

class ButtonThrower(DataNode):
    """
    /**
     * Throws Panda Events for button down/up events generated within the data
     * graph.
     *
     * This is a DataNode which is intended to be parented to the data graph below
     * a device which is generating a sequence of button events, like a
     * MouseAndKeyboard device.  It simply takes each button it finds and throws a
     * corresponding event based on the button name via the throw_event() call.
     */
    """
    def addParameter(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        add_parameter(const ButtonThrower self, const EventParameter obj)
        
        /**
         * Adds the indicated parameter to the list of parameters that will be passed
         * with each event generated by this ButtonThrower.
         */
        """
        pass

    def addThrowButton(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        add_throw_button(const ButtonThrower self, const ModifierButtons mods, const ButtonHandle button)
        
        /**
         * Adds a new button to the set of buttons that the ButtonThrower explicitly
         * processes.
         *
         * If set_throw_buttons_active is false (which is the default), the
         * ButtonThrower will process all buttons.  Otherwise, the ButtonThrower will
         * only process events for the button(s) explicitly named by this function;
         * buttons not on the list will be ignored by this object and passed on
         * downstream to the child node(s) in the data graph.  A button that *is* on
         * the list will be processed by the ButtonThrower and not passed on to the
         * child node(s).
         *
         * The return value is true if the button is added, or false if it was already
         * in the set.
         */
        """
        pass

    def add_parameter(self, const_ButtonThrower_self, const_EventParameter_obj): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        add_parameter(const ButtonThrower self, const EventParameter obj)
        
        /**
         * Adds the indicated parameter to the list of parameters that will be passed
         * with each event generated by this ButtonThrower.
         */
        """
        pass

    def add_throw_button(self, const_ButtonThrower_self, const_ModifierButtons_mods, const_ButtonHandle_button): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        add_throw_button(const ButtonThrower self, const ModifierButtons mods, const ButtonHandle button)
        
        /**
         * Adds a new button to the set of buttons that the ButtonThrower explicitly
         * processes.
         *
         * If set_throw_buttons_active is false (which is the default), the
         * ButtonThrower will process all buttons.  Otherwise, the ButtonThrower will
         * only process events for the button(s) explicitly named by this function;
         * buttons not on the list will be ignored by this object and passed on
         * downstream to the child node(s) in the data graph.  A button that *is* on
         * the list will be processed by the ButtonThrower and not passed on to the
         * child node(s).
         *
         * The return value is true if the button is added, or false if it was already
         * in the set.
         */
        """
        pass

    def clearThrowButtons(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        clear_throw_buttons(const ButtonThrower self)
        
        /**
         * Empties the set of buttons that were added via add_throw_button().  See
         * add_throw_button().
         */
        """
        pass

    def clear_throw_buttons(self, const_ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        clear_throw_buttons(const ButtonThrower self)
        
        /**
         * Empties the set of buttons that were added via add_throw_button().  See
         * add_throw_button().
         */
        """
        pass

    def getButtonDownEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_button_down_event(ButtonThrower self)
        
        /**
         * Returns the button_down_event that has been set on this ButtonThrower.  See
         * set_button_down_event().
         */
        """
        pass

    def getButtonRepeatEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_button_repeat_event(ButtonThrower self)
        
        /**
         * Returns the button_repeat_event that has been set on this ButtonThrower.
         * See set_button_repeat_event().
         */
        """
        pass

    def getButtonUpEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_button_up_event(ButtonThrower self)
        
        /**
         * Returns the button_up_event that has been set on this ButtonThrower.  See
         * set_button_up_event().
         */
        """
        pass

    def getCandidateEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_candidate_event(ButtonThrower self)
        
        /**
         * Returns the candidate_event that has been set on this ButtonThrower.  See
         * set_candidate_event().
         */
        """
        pass

    def getClassType(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_class_type()
        """
        pass

    def getKeystrokeEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_keystroke_event(ButtonThrower self)
        
        /**
         * Returns the keystroke_event that has been set on this ButtonThrower.  See
         * set_keystroke_event().
         */
        """
        pass

    def getModifierButtons(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_modifier_buttons(ButtonThrower self)
        
        /**
         * Returns the set of ModifierButtons that the ButtonThrower will consider
         * important enough to prepend the event name with.  Normally, this set will
         * be empty, and the ButtonThrower will therefore ignore all ModifierButtons
         * attached to the key events, but if one or more buttons have been added to
         * this set, and those modifier buttons are set on the button event, then the
         * event name will be prepended with the names of the modifier buttons.
         */
        """
        pass

    def getMoveEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_move_event(ButtonThrower self)
        
        /**
         * Returns the move_event that has been set on this ButtonThrower.  See
         * set_move_event().
         */
        """
        pass

    def getNumParameters(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_num_parameters(ButtonThrower self)
        
        /**
         * Returns the number of parameters that have been added to the list of
         * parameters to be passed with each event generated by this ButtonThrower.
         */
        """
        pass

    def getParameter(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_parameter(ButtonThrower self, int n)
        
        /**
         * Returns the nth parameter that has been added to the list of parameters
         * passed with each event generated by this ButtonThrower.
         */
        """
        pass

    def getParameters(self, *args, **kwargs): # real signature unknown
        pass

    def getPrefix(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_prefix(ButtonThrower self)
        
        /**
         * Returns the prefix that has been set on this ButtonThrower.  See
         * set_prefix().
         */
        """
        pass

    def getRawButtonDownEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_raw_button_down_event(ButtonThrower self)
        
        /**
         * Returns the raw_button_down_event that has been set on this ButtonThrower.
         * See set_raw_button_down_event().
         */
        """
        pass

    def getRawButtonUpEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_raw_button_up_event(ButtonThrower self)
        
        /**
         * Returns the raw_button_up_event that has been set on this ButtonThrower.
         * See set_raw_button_up_event().
         */
        """
        pass

    def getSpecificFlag(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_specific_flag(ButtonThrower self)
        
        /**
         * Returns the flag that indicates whether specific events should be
         * generated.  See set_specific_flag().
         */
        """
        pass

    def getThrowButtonsActive(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_throw_buttons_active(ButtonThrower self)
        
        /**
         * Returns the flag that indicates whether the ButtonThrower will only process
         * events for the explicitly named buttons or not.  See
         * set_throw_buttons_active().
         */
        """
        pass

    def getTimeFlag(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        get_time_flag(ButtonThrower self)
        
        /**
         * Returns the flag that indicates whether the time of the button event should
         * be passed as a parameter.
         */
        """
        pass

    def get_button_down_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_button_down_event(ButtonThrower self)
        
        /**
         * Returns the button_down_event that has been set on this ButtonThrower.  See
         * set_button_down_event().
         */
        """
        pass

    def get_button_repeat_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_button_repeat_event(ButtonThrower self)
        
        /**
         * Returns the button_repeat_event that has been set on this ButtonThrower.
         * See set_button_repeat_event().
         */
        """
        pass

    def get_button_up_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_button_up_event(ButtonThrower self)
        
        /**
         * Returns the button_up_event that has been set on this ButtonThrower.  See
         * set_button_up_event().
         */
        """
        pass

    def get_candidate_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_candidate_event(ButtonThrower self)
        
        /**
         * Returns the candidate_event that has been set on this ButtonThrower.  See
         * set_candidate_event().
         */
        """
        pass

    def get_class_type(self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_class_type()
        """
        pass

    def get_keystroke_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_keystroke_event(ButtonThrower self)
        
        /**
         * Returns the keystroke_event that has been set on this ButtonThrower.  See
         * set_keystroke_event().
         */
        """
        pass

    def get_modifier_buttons(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_modifier_buttons(ButtonThrower self)
        
        /**
         * Returns the set of ModifierButtons that the ButtonThrower will consider
         * important enough to prepend the event name with.  Normally, this set will
         * be empty, and the ButtonThrower will therefore ignore all ModifierButtons
         * attached to the key events, but if one or more buttons have been added to
         * this set, and those modifier buttons are set on the button event, then the
         * event name will be prepended with the names of the modifier buttons.
         */
        """
        pass

    def get_move_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_move_event(ButtonThrower self)
        
        /**
         * Returns the move_event that has been set on this ButtonThrower.  See
         * set_move_event().
         */
        """
        pass

    def get_num_parameters(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_num_parameters(ButtonThrower self)
        
        /**
         * Returns the number of parameters that have been added to the list of
         * parameters to be passed with each event generated by this ButtonThrower.
         */
        """
        pass

    def get_parameter(self, ButtonThrower_self, int_n): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_parameter(ButtonThrower self, int n)
        
        /**
         * Returns the nth parameter that has been added to the list of parameters
         * passed with each event generated by this ButtonThrower.
         */
        """
        pass

    def get_parameters(self, *args, **kwargs): # real signature unknown
        pass

    def get_prefix(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_prefix(ButtonThrower self)
        
        /**
         * Returns the prefix that has been set on this ButtonThrower.  See
         * set_prefix().
         */
        """
        pass

    def get_raw_button_down_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_raw_button_down_event(ButtonThrower self)
        
        /**
         * Returns the raw_button_down_event that has been set on this ButtonThrower.
         * See set_raw_button_down_event().
         */
        """
        pass

    def get_raw_button_up_event(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_raw_button_up_event(ButtonThrower self)
        
        /**
         * Returns the raw_button_up_event that has been set on this ButtonThrower.
         * See set_raw_button_up_event().
         */
        """
        pass

    def get_specific_flag(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_specific_flag(ButtonThrower self)
        
        /**
         * Returns the flag that indicates whether specific events should be
         * generated.  See set_specific_flag().
         */
        """
        pass

    def get_throw_buttons_active(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_throw_buttons_active(ButtonThrower self)
        
        /**
         * Returns the flag that indicates whether the ButtonThrower will only process
         * events for the explicitly named buttons or not.  See
         * set_throw_buttons_active().
         */
        """
        pass

    def get_time_flag(self, ButtonThrower_self): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        get_time_flag(ButtonThrower self)
        
        /**
         * Returns the flag that indicates whether the time of the button event should
         * be passed as a parameter.
         */
        """
        pass

    def hasThrowButton(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        has_throw_button(ButtonThrower self, const ButtonHandle button)
        has_throw_button(ButtonThrower self, const ModifierButtons mods, const ButtonHandle button)
        
        /**
         * Returns true if the indicated button is on the set of buttons that will be
         * processed by the ButtonThrower, false otherwise.  See add_throw_button().
         */
        
        /**
         * Returns true if the indicated button, in conjunction with any nonspecified
         * modifier buttons, is on the set of buttons that will be processed by the
         * ButtonThrower.  That is to say, returns true if this button was ever passed
         * as the second parameter add_throw_button(), regardless of what the first
         * parameter was.
         */
        """
        pass

    def has_throw_button(self, ButtonThrower_self, const_ButtonHandle_button): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        has_throw_button(ButtonThrower self, const ButtonHandle button)
        has_throw_button(ButtonThrower self, const ModifierButtons mods, const ButtonHandle button)
        
        /**
         * Returns true if the indicated button is on the set of buttons that will be
         * processed by the ButtonThrower, false otherwise.  See add_throw_button().
         */
        
        /**
         * Returns true if the indicated button, in conjunction with any nonspecified
         * modifier buttons, is on the set of buttons that will be processed by the
         * ButtonThrower.  That is to say, returns true if this button was ever passed
         * as the second parameter add_throw_button(), regardless of what the first
         * parameter was.
         */
        """
        pass

    def removeThrowButton(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        remove_throw_button(const ButtonThrower self, const ModifierButtons mods, const ButtonHandle button)
        
        /**
         * Removes the indicated button from the set of buttons that the ButtonThrower
         * explicitly processes.  See add_throw_button().
         *
         * The return value is true if the button is removed, or false if it was not
         * on the set.
         */
        """
        pass

    def remove_throw_button(self, const_ButtonThrower_self, const_ModifierButtons_mods, const_ButtonHandle_button): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        remove_throw_button(const ButtonThrower self, const ModifierButtons mods, const ButtonHandle button)
        
        /**
         * Removes the indicated button from the set of buttons that the ButtonThrower
         * explicitly processes.  See add_throw_button().
         *
         * The return value is true if the button is removed, or false if it was not
         * on the set.
         */
        """
        pass

    def setButtonDownEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_button_down_event(const ButtonThrower self, str button_down_event)
        
        /**
         * Specifies the generic event that is generated (if any) each time a key or
         * button is depressed.  Unlike the specific events that are unique to each
         * key, this same event name is used for *all* button events, and the name of
         * the button pressed (possibly with modifier prefixes) will be sent as a
         * parameter.
         *
         * If this string is empty, no event is generated.  It is possible to generate
         * both generic events and specific events for the same button.
         *
         * See also set_keystroke_event().
         */
        """
        pass

    def setButtonRepeatEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_button_repeat_event(const ButtonThrower self, str button_repeat_event)
        
        /**
         * Specifies the generic event that is generated (if any) repeatedly while a
         * key or button is held down.  Unlike the specific events that are unique to
         * each key, this same event name is used for *all* button events, and the
         * name of the button pressed (possibly with modifier prefixes) will be sent
         * as a parameter.
         *
         * If this string is empty, no event is generated.  It is possible to generate
         * both generic events and specific events for the same button.
         *
         * See also set_keystroke_event().
         */
        """
        pass

    def setButtonUpEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_button_up_event(const ButtonThrower self, str button_up_event)
        
        /**
         * Specifies the generic event that is generated (if any) each time a key or
         * button is released.  See set_button_down_event().
         */
        """
        pass

    def setCandidateEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_candidate_event(const ButtonThrower self, str candidate_event)
        
        /**
         * Specifies the event that is generated (if any) for each IME candidate
         * string event received.  Events of this nature are received only when the
         * user is entering data using a Microsoft Input Method Editor, typically used
         * for Asian languages such as Japanese or Korean.
         *
         * If you are designing a typing user interface, you should track this event
         * to support the use of the IME.  In response to this event, you should
         * display the candidate string in the entry box, with the appropriate
         * sections highlighted, so the user can scroll through the available choices.
         *
         * This event is generated with four parameters, in order: the candidate
         * string, the character at which to start the highlight, the character at
         * which to end the highlight, and the current cursor position.
         */
        """
        pass

    def setKeystrokeEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_keystroke_event(const ButtonThrower self, str keystroke_event)
        
        /**
         * Specifies the event that is generated (if any) for each keystroke that is
         * received.  A keystroke is different than a button event: it represents the
         * semantic meaning of the sequence of keys that have been pressed.  For
         * instance, pressing shift and 4 together will generate the button event
         * "shift-4", but it will generate the keystroke "$".
         *
         * If a key is held down, keyrepeat will cause the same keystroke event to be
         * generated repeatedly.  This is different from the corresponding down event,
         * which will only be generated once, followed by a number of button repeat
         * events.
         *
         * This event is generated with a single wstring parameter, which is a one-
         * character string that contains the keystroke generated.  If this event
         * string is empty, no event is generated.
         *
         * See also set_button_down_event().
         */
        """
        pass

    def setModifierButtons(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_modifier_buttons(const ButtonThrower self, const ModifierButtons mods)
        
        /**
         * Changes the set of ModifierButtons that the ButtonThrower will consider
         * important enough to prepend the event name with.  Normally, this set will
         * be empty, and the ButtonThrower will therefore ignore all ModifierButtons
         * attached to the key events, but if one or more buttons have been added to
         * this set, then the event name will be prepended with the names of the
         * modifier buttons.
         *
         * It is recommended that you change this setting by first calling
         * get_modifier_buttons(), making adjustments, and passing the new value to
         * set_modifier_buttons().  This way the current state of the modifier buttons
         * will not be lost.
         */
        """
        pass

    def setMoveEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_move_event(const ButtonThrower self, str move_event)
        
        /**
         * Specifies the event that is generated (if any) each time the mouse is moved
         * within the window.
         */
        """
        pass

    def setPrefix(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_prefix(const ButtonThrower self, str prefix)
        
        /**
         * Sets the prefix which is prepended to all specific event names (that is,
         * event names generated from the button name itself, as opposed to the
         * generic event names like set_button_down_event) thrown by this object.
         */
        """
        pass

    def setRawButtonDownEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_raw_button_down_event(const ButtonThrower self, str raw_button_down_event)
        
        /**
         * Like set_button_down_event, but uses the raw, untransformed scan key from
         * the operating system.  This uses buttons that are independent of the user's
         * selected keyboard layout.
         */
        """
        pass

    def setRawButtonUpEvent(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_raw_button_up_event(const ButtonThrower self, str raw_button_up_event)
        
        /**
         * Specifies the generic event that is generated (if any) each time a key or
         * button is released.  See set_raw_button_down_event().
         */
        """
        pass

    def setSpecificFlag(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_specific_flag(const ButtonThrower self, bool specific_flag)
        
        /**
         * Sets the flag that indicates whether specific events (events prefixed by
         * set_prefix, and based on the event name) should be generated at all.  This
         * is true by default, but may be disabled if you are only interested in the
         * generic events (for instance, events like set_button_down_event).
         */
        """
        pass

    def setThrowButtonsActive(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_throw_buttons_active(const ButtonThrower self, bool flag)
        
        /**
         * Sets the flag that indicates whether the ButtonThrower will only process
         * events for the explicitly named buttons or not.  Normally this is false,
         * meaning all buttons are processed; set it true to indicate that only some
         * buttons should be processed.  See add_throw_button().
         */
        """
        pass

    def setTimeFlag(self, *args, **kwargs): # real signature unknown
        """
        C++ Interface:
        set_time_flag(const ButtonThrower self, bool time_flag)
        
        /**
         * Sets the flag that indicates whether the time of the button event should be
         * passed as a parameter or not.  When this is true, an additional parameter
         * is generated on each event (before all the parameters named by
         * add_parameter) that consists of a single double value, and reflects the
         * time the button was pressed or released, as a value from
         * ClockObject::get_global_clock().
         */
        """
        pass

    def set_button_down_event(self, const_ButtonThrower_self, str_button_down_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_button_down_event(const ButtonThrower self, str button_down_event)
        
        /**
         * Specifies the generic event that is generated (if any) each time a key or
         * button is depressed.  Unlike the specific events that are unique to each
         * key, this same event name is used for *all* button events, and the name of
         * the button pressed (possibly with modifier prefixes) will be sent as a
         * parameter.
         *
         * If this string is empty, no event is generated.  It is possible to generate
         * both generic events and specific events for the same button.
         *
         * See also set_keystroke_event().
         */
        """
        pass

    def set_button_repeat_event(self, const_ButtonThrower_self, str_button_repeat_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_button_repeat_event(const ButtonThrower self, str button_repeat_event)
        
        /**
         * Specifies the generic event that is generated (if any) repeatedly while a
         * key or button is held down.  Unlike the specific events that are unique to
         * each key, this same event name is used for *all* button events, and the
         * name of the button pressed (possibly with modifier prefixes) will be sent
         * as a parameter.
         *
         * If this string is empty, no event is generated.  It is possible to generate
         * both generic events and specific events for the same button.
         *
         * See also set_keystroke_event().
         */
        """
        pass

    def set_button_up_event(self, const_ButtonThrower_self, str_button_up_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_button_up_event(const ButtonThrower self, str button_up_event)
        
        /**
         * Specifies the generic event that is generated (if any) each time a key or
         * button is released.  See set_button_down_event().
         */
        """
        pass

    def set_candidate_event(self, const_ButtonThrower_self, str_candidate_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_candidate_event(const ButtonThrower self, str candidate_event)
        
        /**
         * Specifies the event that is generated (if any) for each IME candidate
         * string event received.  Events of this nature are received only when the
         * user is entering data using a Microsoft Input Method Editor, typically used
         * for Asian languages such as Japanese or Korean.
         *
         * If you are designing a typing user interface, you should track this event
         * to support the use of the IME.  In response to this event, you should
         * display the candidate string in the entry box, with the appropriate
         * sections highlighted, so the user can scroll through the available choices.
         *
         * This event is generated with four parameters, in order: the candidate
         * string, the character at which to start the highlight, the character at
         * which to end the highlight, and the current cursor position.
         */
        """
        pass

    def set_keystroke_event(self, const_ButtonThrower_self, str_keystroke_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_keystroke_event(const ButtonThrower self, str keystroke_event)
        
        /**
         * Specifies the event that is generated (if any) for each keystroke that is
         * received.  A keystroke is different than a button event: it represents the
         * semantic meaning of the sequence of keys that have been pressed.  For
         * instance, pressing shift and 4 together will generate the button event
         * "shift-4", but it will generate the keystroke "$".
         *
         * If a key is held down, keyrepeat will cause the same keystroke event to be
         * generated repeatedly.  This is different from the corresponding down event,
         * which will only be generated once, followed by a number of button repeat
         * events.
         *
         * This event is generated with a single wstring parameter, which is a one-
         * character string that contains the keystroke generated.  If this event
         * string is empty, no event is generated.
         *
         * See also set_button_down_event().
         */
        """
        pass

    def set_modifier_buttons(self, const_ButtonThrower_self, const_ModifierButtons_mods): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_modifier_buttons(const ButtonThrower self, const ModifierButtons mods)
        
        /**
         * Changes the set of ModifierButtons that the ButtonThrower will consider
         * important enough to prepend the event name with.  Normally, this set will
         * be empty, and the ButtonThrower will therefore ignore all ModifierButtons
         * attached to the key events, but if one or more buttons have been added to
         * this set, then the event name will be prepended with the names of the
         * modifier buttons.
         *
         * It is recommended that you change this setting by first calling
         * get_modifier_buttons(), making adjustments, and passing the new value to
         * set_modifier_buttons().  This way the current state of the modifier buttons
         * will not be lost.
         */
        """
        pass

    def set_move_event(self, const_ButtonThrower_self, str_move_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_move_event(const ButtonThrower self, str move_event)
        
        /**
         * Specifies the event that is generated (if any) each time the mouse is moved
         * within the window.
         */
        """
        pass

    def set_prefix(self, const_ButtonThrower_self, str_prefix): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_prefix(const ButtonThrower self, str prefix)
        
        /**
         * Sets the prefix which is prepended to all specific event names (that is,
         * event names generated from the button name itself, as opposed to the
         * generic event names like set_button_down_event) thrown by this object.
         */
        """
        pass

    def set_raw_button_down_event(self, const_ButtonThrower_self, str_raw_button_down_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_raw_button_down_event(const ButtonThrower self, str raw_button_down_event)
        
        /**
         * Like set_button_down_event, but uses the raw, untransformed scan key from
         * the operating system.  This uses buttons that are independent of the user's
         * selected keyboard layout.
         */
        """
        pass

    def set_raw_button_up_event(self, const_ButtonThrower_self, str_raw_button_up_event): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_raw_button_up_event(const ButtonThrower self, str raw_button_up_event)
        
        /**
         * Specifies the generic event that is generated (if any) each time a key or
         * button is released.  See set_raw_button_down_event().
         */
        """
        pass

    def set_specific_flag(self, const_ButtonThrower_self, bool_specific_flag): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_specific_flag(const ButtonThrower self, bool specific_flag)
        
        /**
         * Sets the flag that indicates whether specific events (events prefixed by
         * set_prefix, and based on the event name) should be generated at all.  This
         * is true by default, but may be disabled if you are only interested in the
         * generic events (for instance, events like set_button_down_event).
         */
        """
        pass

    def set_throw_buttons_active(self, const_ButtonThrower_self, bool_flag): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_throw_buttons_active(const ButtonThrower self, bool flag)
        
        /**
         * Sets the flag that indicates whether the ButtonThrower will only process
         * events for the explicitly named buttons or not.  Normally this is false,
         * meaning all buttons are processed; set it true to indicate that only some
         * buttons should be processed.  See add_throw_button().
         */
        """
        pass

    def set_time_flag(self, const_ButtonThrower_self, bool_time_flag): # real signature unknown; restored from __doc__
        """
        C++ Interface:
        set_time_flag(const ButtonThrower self, bool time_flag)
        
        /**
         * Sets the flag that indicates whether the time of the button event should be
         * passed as a parameter or not.  When this is true, an additional parameter
         * is generated on each event (before all the parameters named by
         * add_parameter) that consists of a single double value, and reflects the
         * time the button was pressed or released, as a value from
         * ClockObject::get_global_clock().
         */
        """
        pass

    def __copy__(self, *args, **kwargs): # real signature unknown
        pass

    def __deepcopy__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    button_down_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    button_repeat_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    button_up_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    candidate_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    keystroke_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    modifier_buttons = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    move_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    raw_button_down_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    raw_button_up_event = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    specific_flag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    throw_buttons_active = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    time_flag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default


    DtoolClassDict = {
        'DtoolClassDict': '<value is a self-reference, replaced by this string>',
        '__copy__': None, # (!) real value is "<method '__copy__' of 'panda3d.core.ButtonThrower' objects>"
        '__deepcopy__': None, # (!) real value is "<method '__deepcopy__' of 'panda3d.core.ButtonThrower' objects>"
        '__doc__': '/**\n * Throws Panda Events for button down/up events generated within the data\n * graph.\n *\n * This is a DataNode which is intended to be parented to the data graph below\n * a device which is generating a sequence of button events, like a\n * MouseAndKeyboard device.  It simply takes each button it finds and throws a\n * corresponding event based on the button name via the throw_event() call.\n */',
        '__init__': None, # (!) real value is "<slot wrapper '__init__' of 'panda3d.core.ButtonThrower' objects>"
        '__new__': None, # (!) real value is '<built-in method __new__ of type object at 0x00007FFCFE365F00>'
        'addParameter': None, # (!) real value is "<method 'addParameter' of 'panda3d.core.ButtonThrower' objects>"
        'addThrowButton': None, # (!) real value is "<method 'addThrowButton' of 'panda3d.core.ButtonThrower' objects>"
        'add_parameter': None, # (!) real value is "<method 'add_parameter' of 'panda3d.core.ButtonThrower' objects>"
        'add_throw_button': None, # (!) real value is "<method 'add_throw_button' of 'panda3d.core.ButtonThrower' objects>"
        'button_down_event': None, # (!) real value is "<attribute 'button_down_event' of 'panda3d.core.ButtonThrower' objects>"
        'button_repeat_event': None, # (!) real value is "<attribute 'button_repeat_event' of 'panda3d.core.ButtonThrower' objects>"
        'button_up_event': None, # (!) real value is "<attribute 'button_up_event' of 'panda3d.core.ButtonThrower' objects>"
        'candidate_event': None, # (!) real value is "<attribute 'candidate_event' of 'panda3d.core.ButtonThrower' objects>"
        'clearThrowButtons': None, # (!) real value is "<method 'clearThrowButtons' of 'panda3d.core.ButtonThrower' objects>"
        'clear_throw_buttons': None, # (!) real value is "<method 'clear_throw_buttons' of 'panda3d.core.ButtonThrower' objects>"
        'getButtonDownEvent': None, # (!) real value is "<method 'getButtonDownEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getButtonRepeatEvent': None, # (!) real value is "<method 'getButtonRepeatEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getButtonUpEvent': None, # (!) real value is "<method 'getButtonUpEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getCandidateEvent': None, # (!) real value is "<method 'getCandidateEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getClassType': None, # (!) real value is '<staticmethod(<built-in method getClassType of type object at 0x00007FFCFE365F00>)>'
        'getKeystrokeEvent': None, # (!) real value is "<method 'getKeystrokeEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getModifierButtons': None, # (!) real value is "<method 'getModifierButtons' of 'panda3d.core.ButtonThrower' objects>"
        'getMoveEvent': None, # (!) real value is "<method 'getMoveEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getNumParameters': None, # (!) real value is "<method 'getNumParameters' of 'panda3d.core.ButtonThrower' objects>"
        'getParameter': None, # (!) real value is "<method 'getParameter' of 'panda3d.core.ButtonThrower' objects>"
        'getParameters': None, # (!) real value is "<method 'getParameters' of 'panda3d.core.ButtonThrower' objects>"
        'getPrefix': None, # (!) real value is "<method 'getPrefix' of 'panda3d.core.ButtonThrower' objects>"
        'getRawButtonDownEvent': None, # (!) real value is "<method 'getRawButtonDownEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getRawButtonUpEvent': None, # (!) real value is "<method 'getRawButtonUpEvent' of 'panda3d.core.ButtonThrower' objects>"
        'getSpecificFlag': None, # (!) real value is "<method 'getSpecificFlag' of 'panda3d.core.ButtonThrower' objects>"
        'getThrowButtonsActive': None, # (!) real value is "<method 'getThrowButtonsActive' of 'panda3d.core.ButtonThrower' objects>"
        'getTimeFlag': None, # (!) real value is "<method 'getTimeFlag' of 'panda3d.core.ButtonThrower' objects>"
        'get_button_down_event': None, # (!) real value is "<method 'get_button_down_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_button_repeat_event': None, # (!) real value is "<method 'get_button_repeat_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_button_up_event': None, # (!) real value is "<method 'get_button_up_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_candidate_event': None, # (!) real value is "<method 'get_candidate_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_class_type': None, # (!) real value is '<staticmethod(<built-in method get_class_type of type object at 0x00007FFCFE365F00>)>'
        'get_keystroke_event': None, # (!) real value is "<method 'get_keystroke_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_modifier_buttons': None, # (!) real value is "<method 'get_modifier_buttons' of 'panda3d.core.ButtonThrower' objects>"
        'get_move_event': None, # (!) real value is "<method 'get_move_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_num_parameters': None, # (!) real value is "<method 'get_num_parameters' of 'panda3d.core.ButtonThrower' objects>"
        'get_parameter': None, # (!) real value is "<method 'get_parameter' of 'panda3d.core.ButtonThrower' objects>"
        'get_parameters': None, # (!) real value is "<method 'get_parameters' of 'panda3d.core.ButtonThrower' objects>"
        'get_prefix': None, # (!) real value is "<method 'get_prefix' of 'panda3d.core.ButtonThrower' objects>"
        'get_raw_button_down_event': None, # (!) real value is "<method 'get_raw_button_down_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_raw_button_up_event': None, # (!) real value is "<method 'get_raw_button_up_event' of 'panda3d.core.ButtonThrower' objects>"
        'get_specific_flag': None, # (!) real value is "<method 'get_specific_flag' of 'panda3d.core.ButtonThrower' objects>"
        'get_throw_buttons_active': None, # (!) real value is "<method 'get_throw_buttons_active' of 'panda3d.core.ButtonThrower' objects>"
        'get_time_flag': None, # (!) real value is "<method 'get_time_flag' of 'panda3d.core.ButtonThrower' objects>"
        'hasThrowButton': None, # (!) real value is "<method 'hasThrowButton' of 'panda3d.core.ButtonThrower' objects>"
        'has_throw_button': None, # (!) real value is "<method 'has_throw_button' of 'panda3d.core.ButtonThrower' objects>"
        'keystroke_event': None, # (!) real value is "<attribute 'keystroke_event' of 'panda3d.core.ButtonThrower' objects>"
        'modifier_buttons': None, # (!) real value is "<attribute 'modifier_buttons' of 'panda3d.core.ButtonThrower' objects>"
        'move_event': None, # (!) real value is "<attribute 'move_event' of 'panda3d.core.ButtonThrower' objects>"
        'parameters': None, # (!) real value is "<attribute 'parameters' of 'panda3d.core.ButtonThrower' objects>"
        'prefix': None, # (!) real value is "<attribute 'prefix' of 'panda3d.core.ButtonThrower' objects>"
        'raw_button_down_event': None, # (!) real value is "<attribute 'raw_button_down_event' of 'panda3d.core.ButtonThrower' objects>"
        'raw_button_up_event': None, # (!) real value is "<attribute 'raw_button_up_event' of 'panda3d.core.ButtonThrower' objects>"
        'removeThrowButton': None, # (!) real value is "<method 'removeThrowButton' of 'panda3d.core.ButtonThrower' objects>"
        'remove_throw_button': None, # (!) real value is "<method 'remove_throw_button' of 'panda3d.core.ButtonThrower' objects>"
        'setButtonDownEvent': None, # (!) real value is "<method 'setButtonDownEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setButtonRepeatEvent': None, # (!) real value is "<method 'setButtonRepeatEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setButtonUpEvent': None, # (!) real value is "<method 'setButtonUpEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setCandidateEvent': None, # (!) real value is "<method 'setCandidateEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setKeystrokeEvent': None, # (!) real value is "<method 'setKeystrokeEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setModifierButtons': None, # (!) real value is "<method 'setModifierButtons' of 'panda3d.core.ButtonThrower' objects>"
        'setMoveEvent': None, # (!) real value is "<method 'setMoveEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setPrefix': None, # (!) real value is "<method 'setPrefix' of 'panda3d.core.ButtonThrower' objects>"
        'setRawButtonDownEvent': None, # (!) real value is "<method 'setRawButtonDownEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setRawButtonUpEvent': None, # (!) real value is "<method 'setRawButtonUpEvent' of 'panda3d.core.ButtonThrower' objects>"
        'setSpecificFlag': None, # (!) real value is "<method 'setSpecificFlag' of 'panda3d.core.ButtonThrower' objects>"
        'setThrowButtonsActive': None, # (!) real value is "<method 'setThrowButtonsActive' of 'panda3d.core.ButtonThrower' objects>"
        'setTimeFlag': None, # (!) real value is "<method 'setTimeFlag' of 'panda3d.core.ButtonThrower' objects>"
        'set_button_down_event': None, # (!) real value is "<method 'set_button_down_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_button_repeat_event': None, # (!) real value is "<method 'set_button_repeat_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_button_up_event': None, # (!) real value is "<method 'set_button_up_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_candidate_event': None, # (!) real value is "<method 'set_candidate_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_keystroke_event': None, # (!) real value is "<method 'set_keystroke_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_modifier_buttons': None, # (!) real value is "<method 'set_modifier_buttons' of 'panda3d.core.ButtonThrower' objects>"
        'set_move_event': None, # (!) real value is "<method 'set_move_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_prefix': None, # (!) real value is "<method 'set_prefix' of 'panda3d.core.ButtonThrower' objects>"
        'set_raw_button_down_event': None, # (!) real value is "<method 'set_raw_button_down_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_raw_button_up_event': None, # (!) real value is "<method 'set_raw_button_up_event' of 'panda3d.core.ButtonThrower' objects>"
        'set_specific_flag': None, # (!) real value is "<method 'set_specific_flag' of 'panda3d.core.ButtonThrower' objects>"
        'set_throw_buttons_active': None, # (!) real value is "<method 'set_throw_buttons_active' of 'panda3d.core.ButtonThrower' objects>"
        'set_time_flag': None, # (!) real value is "<method 'set_time_flag' of 'panda3d.core.ButtonThrower' objects>"
        'specific_flag': None, # (!) real value is "<attribute 'specific_flag' of 'panda3d.core.ButtonThrower' objects>"
        'throw_buttons_active': None, # (!) real value is "<attribute 'throw_buttons_active' of 'panda3d.core.ButtonThrower' objects>"
        'time_flag': None, # (!) real value is "<attribute 'time_flag' of 'panda3d.core.ButtonThrower' objects>"
    }


